<html>
<head>
<meta charset="UTF-8">
<title>Viewer - PrimaryDock</title>
<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<script>
var nglcitation
	= "AS Rose, AR Bradley, Y Valasatava, JM Duarte, A Prlić and PW Rose.\n"
	+ "Web-based molecular graphics for large complexes.\n"
	+ "ACM Proceedings of the 21st International Conference on Web3D Technology (Web3D '16):\n"
	+ "185-186, 2016. doi:10.1145/2945292.2945324\n"
	+ "\n"
	+ "AS Rose and PW Hildebrand.\n"
	+ "NGL Viewer: a web application for molecular visualization.\n"
	+ "Nucl Acids Res (1 July 2015) 43 (W1):\n"
	+ "W576-W579 first published online April 29, 2015.\n"
	+ "doi:10.1093/nar/gkv402";

const aa1let = "ARNDCEQGHOILKMFPÖUSTWYV";
const aa3let =
[
	'ALA', 'ARG', 'ASN', 'ASP', 'CYS',
	'GLU', 'GLN', 'GLY', 'HIS', 'HYP',
	'ILE', 'LEU', 'LYS', 'MET', 'PHE',
	'PRO', 'PYL', 'SEC', 'SER', 'THR',
	'TRP', 'TYR', 'VAL',
];

var opc_molecule = 1.0;
var opc_ligand = 1.0;
var opc_cartoon = 0.25;
var opc_sidechain = 0.4;
var opc_sidechain_active = 0.5;
var opc_metal = 1.0;

var mtl_bs = 0.0;
var mtl_licorice = 0.0;
var mtl_cartoon = 0.1;
var mtl_metal = 0.5;

</script>
<style>
body
{
	color: #69c;
	overflow: hidden;
}

a
{	color: #2af;
	text-decoration: none;
}
a:hover
{
	text-decoration: underline;
}

#pleasewait
{
	position: fixed;
	top: 22%;
	left: 40%;
	right: 40%;
	width: 20%;
	text-align: center;
	background-color: rgba(0,11,31,0.67);
	color: #def;
	padding: 15px;
	border-radius: 25px;
	box-shadow: 0px 0px 41px rgba(0,0,0,0.22), 5px 3px 5px rgba(0,0,0,0.41);
}

#citefloat
{
	position: fixed;
	text-align: right;
    right: 25px;
    bottom: 15px;
	font-family: Verdana, Arial, Sans-Serif;
    font-size: 11px;
	color: #06c;
}

#citefloat span
{
    background-color: rgba(0,0,0,0.53);
	color: rgba(0, 128, 255, 0);
	font-size: 15px;
	transition: color 2s, height 2s;
	text-align: left;
	display: block;
	height: 0px;
	overflow: hidden;
}

#citefloat:hover span
{
	color: rgba(192, 192, 192, 1);
	display: block;
	height: auto;
}

#ctrls div
{
    margin-left: 15px;
}

#posey
{
	background-color: #123;
    min-width: 71px;
    padding-left: 5px;
    padding-right: 5px;
}

.clickme, .clickme:hover
{
	cursor: pointer;
	text-decoration: none;
}

.clickme:hover
{
	color: #9cf;
}

.posebtn
{
	background-color: #246;
    border-top: 2px solid #47a;
    border-left: 2px solid #369;
    border-right: 2px solid #234;
    border-bottom: 2px solid #123;
    border-radius: 5px;
    padding-left: 3px;
    padding-right: 3px;
    margin-left: 2px;
    margin-right: 2px;
	cursor: pointer;
    font-size: 14px;
	font-family: Verdana, Arial, sans-serif;
}

.posebtn.hilite
{
	background-color: #369;
    border-top: 2px solid #68a;
    border-left: 2px solid #579;
    border-right: 2px solid #246;
    border-bottom: 2px solid #135;
}

.nodebtn
{
	background-color: #234;
    padding-left: 5px;
    padding-right: 5px;
    margin-left: 0px;
    margin-right: 0px;
	cursor: pointer;
    font-size: 14px;
	font-family: Verdana, Arial, sans-serif;
}

.nodebtn.hilite
{
	background-color: #357;
}

.symbol
{	font-size: 20px!important;
}

input[type=file]
{
    /*width: 600px;*/
}

input, select
{
	background-color: #036;
	color: #9cf;
    border: 1px solid #06c;
    border-radius: 5px;
}

option.agonist
{
	background-color: #044;
	color: #9ef;
	font-weight: bold;
}

option.non_agonist
{
	background-color: #234;
	color: #bcd;
}

option.antagonist
{
	background-color: #410;
	color: #fb9;
}

option.unknown
{
	background-color: #000;
	color: #999;
}

#clip
{
    width: 400px;
}

#seqdd
{
	background-color: #235;
	position: absolute;
	display: block;
	top: 25px;
	/*left: 225px;*/
	right: 5px;
	z-index: 1000;
	padding: 10px;
	border: 1px solid #249;
	border-radius: 15px;
}

.sctgbtn
{
	font-family: Monospace;
	margin-bottom: 10px;
}

.sctgbtn.hilite
{
	border: 1px solid #35f;
    background-color: #345;
    color: #9cf;
    padding-left: 4px;
    padding-right: 4px;
}

.seqnumln
{
	font-family: Monospace;
	letter-spacing: 1.4px;
    margin-left: 5px;
    font-size: 13px;
}

.packtight
{
	letter-spacing: -4px!important;
}

</style>
<script src="https://unpkg.com/ngl@0.10.4/dist/ngl.js"></script>
<script>

// https://www.w3schools.com/jsref/met_element_exitfullscreen.asp
function openFullscreen(elem) 
{
	if (elem.requestFullscreen) 
	{
		elem.requestFullscreen();
	}
	else if (elem.webkitRequestFullscreen)
	{
		/* Safari */
		elem.webkitRequestFullscreen();
	}
	else if (elem.msRequestFullscreen) 
	{
		/* IE11 */
		elem.msRequestFullscreen();
	}
}
function exitFullscreen()
{
	if (document.exitFullscreen)
	{
		document.exitFullscreen();
	}
	else if (document.webkitExitFullscreen)
	{
		/* Safari */
		document.webkitExitFullscreen();
	}
	else if (document.msExitFullscreen) 
	{ 
		/* IE11 */
		document.msExitFullscreen();
	}
}
var is_fullscreen = false;

/******************************************************************************/
// http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
function getParameterByName(name, url)
{
    if (!url)
    {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
    results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
/******************************************************************************/
</script>
</head>
<body bgcolor="#000">
<div id="ctrls" style="display: flex; flex-wrap: wrap;">
    <div id="filediv">
		<input type="file">
    </div>

<div id="posey" title="Use the A-Z keys or the up and down arrow keys to choose poses when viewing dock results.">&nbsp;
</div>

<div id="pnodz"
     title="Use the 0-9 keys or the left and right arrow keys to choose nodes when viewing dock results. Shift+A-Z selects nodes 10 - 35."
     >&nbsp;
</div>

<div id="clipslide">
Clip:
<input type="range" id="clip" min="0" max="100" step="1" value="0" class="slider" onkeyup="this.blur();">
<span id="prsv" style="display: none;">
<input type="checkbox" id="preserve" checked onchange="$('#clip').trigger('input');"> Preserve Ligand
</span>
</div>

<div id="affichage">
<a id="sdchbtn" class="nodebtn clickme symbol" onclick="show_seqdd();" title="Side Chains">&#x232C;</a>
</div>

<div id="center">
<a id="fsbtn" class="nodebtn clickme" onclick="if (is_fullscreen) exitFullscreen(); else openFullscreen(document.body); is_fullscreen = !is_fullscreen">&#x26F6;</a>
Center:
<a class="posebtn clickme" onclick="gmodel[0].autoView(); cen_ligand = false;" title="Middle-click an atom to center it.">Model</a>
<a class="posebtn clickme" onclick="centerPocket(); cen_ligand = false;" id="pktbtn" style="display: none;">Pocket</a>
<a class="posebtn clickme" onclick="curr_ligand.autoView(); cen_ligand = true;" id="ligbtn" style="display: none;">Ligand</a>
</div>
</div>
<center>
<div id="viewport" style="width:1800px; height:880px; background-color: #201008;"></div>
</center>
<script>

function hsl_to_rgb(hue, sat, lum)
{
  sat /= 255;
  lum /= 255;
  const k = n => (n + hue / 30) % 12;
  const a = sat * Math.min(lum, 1 - lum);
  const f = n =>
    lum - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
  var r = 255 * f(0);
  var g = 255 * f(8);
  var b = 255 * f(4);
  
  return 0x10000*parseInt(r) + 0x100*parseInt(g) + parseInt(b);
}

// Can modify this array to your preferred TMR color scheme.
var tmcolor =
{
    1: hsl_to_rgb(260,  64, 160),
    2: hsl_to_rgb(200, 128, 160),
    3: hsl_to_rgb(150, 192, 176),
    4: hsl_to_rgb( 80,  64, 160),
    5: hsl_to_rgb( 50, 192, 176),
    6: hsl_to_rgb( 35, 192, 176),
    7: hsl_to_rgb(340, 128, 160),
};

/*var tmcolor =
{
    1: 0x887799,
    2: 0x0077ff,
    3: 0x00ff66,
    4: 0x99cc66,
    5: 0xffcc00,
    6: 0xff9900,
    7: 0xbb4466,
};*/

var tmstart = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0}, tmend = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0};

function aa_1let_from_3let(laa3let)
{
	var retval = "?";
	aa3let.forEach(function(item, index)
	{
		if (item == laa3let) retval = aa1let.substr(index, 1);
	});
	return retval;
}

function rgn_color(resno, tm_only = false)
{
	var i;

    for (i=1; i<=7; i++)
    {
        if (resno >= tmstart[i] && resno <= tmend[i]) return tmcolor[i];
        else if (!tm_only && resno < tmstart[i]) return (i&1) ? 0xccddee : 0xcc9966;
    }

    return tm_only ? 0 : 0xcc9966;
}

function rgn_color_dark(resno, tm_only = false)
{
	var couleur = rgn_color(resno, tm_only);
	var r = couleur & 0xff0000;
	var g = couleur & 0x00ff00;
	var b = couleur & 0x0000ff;

	r = Math.floor(r/4) & 0xff0000;
	g = Math.ceil(g/3) & 0x00ff00;
	b = Math.ceil(b/2);
	
	return r + g + b;
}

function css_color(rgb_int)
{
	return '#'+("000000" + rgb_int.toString(16)).substr(-6);
}

var tmoid = false;
function show_seqdd()
{
	var seqdd = $('#seqdd')[0];
	seqdd.innerHTML = "<b>Show/Hide Side Chains:</b><br><br>";
	
	var perline = 40;
	
	var i;
	var span = document.createElement("span");
	var dots = ". . . . . . . . .";
	var dotslen = dots.length;
	span.innerText = dots+"10 "+dots+"20 "+dots+"30 "+dots+"40 ";
	span.className = "seqnumln";
	span.appendChild(document.createElement("br"));
	seqdd.appendChild(span);
	var seqoff = 50;
	for (i=0; i<sequence.length; i++)
	{
		var tgl = document.createElement("span");
		tgl.className = "clickme nodebtn sctgbtn" + (restoggled[i+1] ? " hilite" : "");
		var rcd = rgn_color_dark(i+1, true);
		if (rcd) tgl.style.backgroundColor = css_color(rcd);
		tgl.innerText = sequence.substr(i, 1);
		tgl.id = "seqddtgl" + (i+1);
		var ia = aa1let.indexOf(sequence.substr(i,1));
		tgl.title = (ia>=0) ? (aa3let[ia]+(i+1)) : (sequence.substr(i,1)+(i+1));
		tgl.setAttribute("onclick", "event.preventDefault(); toggleSideChain("+(i+1)+"); return false;");
		tgl.setAttribute("ondblclick", "event.preventDefault(); return false;");
		tgl.setAttribute("onmousedown", "event.preventDefault(); return false;");
		tgl.setAttribute("onmousemove", "event.preventDefault(); return false;");
		seqdd.appendChild(tgl);
		
		if (!((i+1)%perline))
		{
			seqdd.appendChild(document.createElement("br"));
			seqdd.appendChild(document.createElement("br"));
			span = document.createElement("span");
			
			var l;
			span.innerText = "";
			for (l=0; l<perline; l+=10)
			{
				if (seqoff >= 100) dots = dots.substr(0, dotslen-(seqoff.toString().length-2));
				span.innerText += dots+seqoff + " ";
				seqoff += 10;
			}
			
			span.className = "seqnumln";
			span.appendChild(document.createElement("br"));
			seqdd.appendChild(span);
		}
	}
	
	seqdd.appendChild(document.createElement("br"));
	seqdd.appendChild(document.createElement("br"));
	
	tgl = document.createElement("span");
	tgl.className = "clickme nodebtn sctgbtn";
	tgl.innerText = "All";
	tgl.id = "seqddall";
	tgl.title = (ia>=0) ? (aa3let[ia]+(i+1)) : (sequence.substr(i,1)+(i+1));
	tgl.setAttribute("onclick", "event.preventDefault(); showAllSideChains(); return false;");
	tgl.setAttribute("ondblclick", "event.preventDefault(); return false;");
	tgl.setAttribute("onmousedown", "event.preventDefault(); return false;");
	tgl.setAttribute("onmousemove", "event.preventDefault(); return false;");
	seqdd.appendChild(tgl);
	
	tgl = document.createElement("span");
	tgl.innerText = "|";
	seqdd.appendChild(tgl);
	
	tgl = document.createElement("span");
	tgl.className = "clickme nodebtn sctgbtn";
	tgl.innerText = "None";
	tgl.id = "seqddnone";
	tgl.title = (ia>=0) ? (aa3let[ia]+(i+1)) : (sequence.substr(i,1)+(i+1));
	tgl.setAttribute("onclick", "event.preventDefault(); hideAllSideChains(); return false;");
	tgl.setAttribute("ondblclick", "event.preventDefault(); return false;");
	tgl.setAttribute("onmousedown", "event.preventDefault(); return false;");
	tgl.setAttribute("onmousemove", "event.preventDefault(); return false;");
	seqdd.appendChild(tgl);
	
	
	var sdchbtn = $('#sdchbtn')[0];
	var btnrect = sdchbtn.getBoundingClientRect();
	$(seqdd
		).css("top", parseInt(btnrect.bottom).toString()+"px"
		// ).css("left", parseInt(btnrect.left).toString()+"px"
		).toggle().on("mouseleave", function()
		{
			if (tmoid) window.clearTimeout(tmoid);
			tmoid = window.setTimeout(function()
			{
				$('#seqdd').hide();
			}, 1000);
		}).on("mousemove", function()
		{
			if (tmoid) window.clearTimeout(tmoid);
		});
	
}

var stage = new NGL.Stage("viewport");
var gmodel = [], model = [], is_ligand = [], mrep = [], mrparams = [], mpos = [], mnod = [];
var resmdl = [], mdlresno = [], restoggled = [];
var curr_ligand = false, cen_ligand = false;
var gpose = 1, gnode = 0;
var orid;
var mtlcoord = [];
var sequence = "";
var pocket = [0,0,0];

$("#affichage").hide();

window.onresize = function()
{
    var w = parseInt(window.visualViewport.width - $("#viewport")[0].getBoundingClientRect().top - 5);
    var h = parseInt(window.visualViewport.height - 5);
    $('#viewport').css("width", w+"px").css("height",h+"px");
    stage.setSize(w, h);
};
window.onresize();

stage.mouseControls.add( "scroll-ctrl+shift", function( stage, delta )
{
    var ai = stage.getParameters().ambientIntensity;
    stage.setParameters( { ambientIntensity: Math.max( 0, ai + delta / 50 ) } );
} );

stage.mouseControls.add("clickPick", function(stage, e)
{
	toggleSideChain(e.atom.resno);
});

function centerPocket()
{
	stage.viewerControls.center( 
	{
		x: pocket[0],
		y: pocket[1],
		z: pocket[2],
	});
}

function showSideChain(resno)
{
	try
	{
		var clipValue = parseFloat($("#clip")[0].value);
		if (!restoggled[resno])
		{
			var mdlidx = mdlresno.indexOf(resno);
			resmdl[mdlidx].addRepresentation( "licorice",
            {
                "opacity": opc_sidechain,
				"colorScheme": PODefScheme,
                "metalness": mtl_licorice,
                "clipNear": clipValue,
            });
			restoggled[mdlidx] = 1;
			$('#seqddtgl'+resno).addClass('hilite');
		}
	}
	catch (ex)
	{
		;
	}
		
}

function toggleSideChain(resno)
{
	try
	{
		var mdlidx = mdlresno.indexOf(resno);
		if (restoggled[mdlidx])
		{
			resmdl[mdlidx].removeAllRepresentations();
			restoggled[mdlidx] = 0;
			$('#seqddtgl'+resno).removeClass('hilite');
		}
		else
		{
			showSideChain(resno);
		}
	}
	catch (ex)
	{
		;
	}
}

function showAllSideChains()
{
	var resno = 1;
	while (typeof restoggled[resno] != "undefined")
	{
		showSideChain(resno);
		resno++;
	}
}

function hideAllSideChains()
{
	var resno = 1;
	var mdlidx = mdlresno.indexOf(resno);
	while (typeof resmdl[mdlidx] != "undefined")
	{
		resmdl[mdlidx].removeAllRepresentations();
		restoggled[mdlidx] = 0;
		$('#seqddtgl'+resno).removeClass('hilite');
		resno++;
		mdlidx = mdlresno.indexOf(resno);
	}
}

var PODefScheme = NGL.ColormakerRegistry.addScheme(function (params)
{
    this.atomColor = function(atom)
    {
    	var elem = atom.element;
        if (atom.resno <= 1)
        {
        	elem = atom.atomname.replace(/[^A-Za-z]/g, '');
        	elem = elem.charAt(0).toUpperCase() + elem.slice(1).toLowerCase();
    	}
        switch (elem)
        {
        	case 'H': return atom.isBackbone() ? 0x79949b : 0xd1f5ff;
            
        	case 'C':
            if (atom.isBackbone()) return 0x666666;
            else switch (atom.resname)
            {
                case 'GLY':
                return 0x999999;

                case 'ALA':
                case 'ILE':
                case 'LEU':
                case 'PRO':
                case 'VAL':
                return 0x808080;

                case 'MET':
                case 'CYS':
                case 'SEC':
                return 0x99aa77;

                case 'PHE':
                case 'TRP':
                case 'TYR':
                return 0x664466;

                case 'SER':
                case 'THR':
                case 'GLN':
                case 'ASN':
                return 0x55aa93;

                case 'ASP':
                case 'GLU':
                return 0xddbb99;

                case 'HIS':
                case 'LYS':
                case 'ARG':
                case 'PYL':
                return 0x99bbdd;

                default:
                return 0x666666;
            }

        	case 'N': return atom.isBackbone() ? 0x000066 : 0x0066FF;
        	case 'O': return atom.isBackbone() ? 0x660000 : 0xFF0000;
        	case 'P': return 0xff77c6;
        	case 'S': return 0xffdd00;
        	case 'Se': return 0xffaa00;
        	case 'Cl': return 0x339900;
        	case 'Br': return 0x993300;
        	case 'I': return 0x990033;
        	case 'Cu': return 0xe5a072;
        	case 'Zn': return 0x92b0cc;
        	case 'Na': return 0xffcc00;
        	case 'Mg': return 0x99ffcc;
        	case 'K': return 0x9966ff;
        	case 'Ca': return 0xf7f7f7;
        	case 'Fe': return 0x845f42;

        	default: return 0x99aabb;
        }

        return 0xcc00ff;
    };
});

var PODefSchemeHilite = NGL.ColormakerRegistry.addScheme(function (params)
{
    this.atomColor = function(atom)
    {
    	var elem = atom.atomType.element;
        if (atom.resno <= 1)
        {
        	elem = atom.atomname.replace(/[^A-Za-z]/g, '');
        	elem = elem.charAt(0).toUpperCase() + elem.slice(1).toLowerCase();
    	}
        switch (elem)
        {
        	case 'H': return atom.isBackbone() ? 0x79949b : 0xe1faff;
            
        	case 'C':
            if (atom.isBackbone()) return 0x666666;
            else switch (atom.resname)
            {
                case 'GLY':
                return 0xe0e0e0;

                case 'ALA':
                case 'ILE':
                case 'LEU':
                case 'PRO':
                case 'VAL':
                return 0xbbbbbb;

                case 'MET':
                case 'CYS':
                case 'SEC':
                return 0xddee99;

                case 'PHE':
                case 'TRP':
                case 'TYR':
                return 0xaa77aa;

                case 'SER':
                case 'THR':
                case 'GLN':
                case 'ASN':
                return 0x77eed5;

                case 'ASP':
                case 'GLU':
                return 0xffddbb;

                case 'HIS':
                case 'LYS':
                case 'ARG':
                case 'PYL':
                return 0xbbddff;

                default:
                return 0x777777;
            }

        	case 'N': return atom.isBackbone() ? 0x000066 : 0x0087FF;
        	case 'O': return atom.isBackbone() ? 0x660000 : 0xFF2222;
        	case 'P': return 0xff8add;
        	case 'S': return 0xffe022;
        	case 'Se': return 0xffb022;
        	case 'Cl': return 0x339900;
        	case 'Br': return 0x993300;
        	case 'I': return 0x990033;
        	case 'Cu': return 0xe5a072;
        	case 'Zn': return 0x92b0cc;
        	case 'Na': return 0xffcc00;
        	case 'Mg': return 0x99ffcc;
        	case 'K': return 0x9966ff;
        	case 'Ca': return 0xf7f7f7;
        	case 'Fe': return 0x845f42;

        	default: return 0x99aabb;
        }

        return 0xcc00ff;
    };
});

var PODefSchemeLigand = NGL.ColormakerRegistry.addScheme(function (params)
{
    this.atomColor = function(atom)
    {
    	var elem = atom.atomType.element;
        if (atom.resno <= 1)
        {
        	elem = atom.atomname.replace(/[^A-Za-z]/g, '');
        	elem = elem.charAt(0).toUpperCase() + elem.slice(1).toLowerCase();
    	}
        switch (elem)
        {
        	case 'H': return 0xe1faff;
        	case 'C': return 0xcfccc8;
        	case 'N': return 0x0087FF;
        	case 'O': return 0xFF2222;
        	case 'P': return 0xff8add;
        	case 'S': return 0xffe022;
        	case 'Se': return 0xffb022;
        	case 'Cl': return 0x339900;
        	case 'Br': return 0x993300;
        	case 'I': return 0x990033;
        	case 'Cu': return 0xe5a072;
        	case 'Zn': return 0x92b0cc;
        	case 'Na': return 0xffcc00;
        	case 'Mg': return 0x99ffcc;
        	case 'K': return 0x9966ff;
        	case 'Ca': return 0xf7f7f7;
        	case 'Fe': return 0x845f42;

        	default: return 0x99aabb;
        }

        return 0xcc00ff;
    };
});

var PODefRgnScheme = NGL.ColormakerRegistry.addScheme(function (params)
{
    this.atomColor = function(atom)
    {
        var resno = atom.resno;
        return rgn_color(resno);
    }
});

stage.setParameters(
{
	'backgroundColor': '#080400',
	'ambientColor': '#59f',
    'ambientIntensity': 0.5,
	'lightColor': '#fc8',
    'lightIntensity': 0.8,
});

// These do not work in Chrome on Linux.
stage.mouseControls.remove( "scroll-ctrl" );
stage.mouseControls.remove( "scroll-shift" );
stage.mouseControls.remove( "scroll-alt" );

// Things better stay where they are.
stage.mouseControls.remove( "drag-ctrl-right ");
stage.mouseControls.remove( "drag-ctrl-left ");

var url = 'http://primaryodors.org/sdf.php';
var molid = getParameterByName('mol') ? getParameterByName('mol') : 'rand';
if (molid != "~")
{
	$.ajax(
	{
		url: url,
		cache: false,
		data:
		{
			m: molid
		},
		success: function(result)
		{
			$('#posey')[0].innerText = result.split("\n")[0];
			var stringBlob = new Blob( [ result ], { type: 'text/plain'} );
		    stage.loadFile( stringBlob, { ext: "sdf" } ).then( function( comp )
		    {
		        comp.addRepresentation( "ball+stick",
		        {
		        	multipleBond: true,
		        	metalness: mtl_bs,
		        } );
		        gmodel.push(comp);
		        comp.autoView();
		    } );
		}
	});
}

function showPose(p)
{
    var i;

    var pnodz = $('#pnodz')[0];
    pnodz.innerHTML = "Node: ";
    var pmax = 1;

    for (i=0; i<model.length; i++)
    {
        if (mpos[i] == p && mnod[i] == 0)
        {
            model[i].addRepresentation( mrep[i], mrparams[i] );
            if (is_ligand[i]) curr_ligand = model[i];
        }
        else
            model[i].removeAllRepresentations();

        if (mpos[i] > pmax) pmax = mpos[i];

        if (mpos[i] == p && $("#nodebtn"+mnod[i]).length == 0 )
        {
            var nodebtn = document.createElement("a");
            nodebtn.className = "nodebtn";
            if (mnod[i]==0) $(nodebtn).addClass("hilite");
            nodebtn.innerText = mnod[i];
            nodebtn.id = "nodebtn"+mnod[i];
            nodebtn.setAttribute("onclick", "showNode("+mnod[i]+");");

            pnodz.appendChild(nodebtn);
        }
    }

    if (p < 1)
    {
        showPose(1);		// RECURSION!!!
        return;
    }

    if (p > pmax)
    {
        showPose(pmax);		// RECURSION!!!
        return;
    }

    gpose = p;
    gnode = 0;

    $(".posebtn").removeClass("hilite");
    $("#posebtn"+p).addClass("hilite");

    $("#clip").trigger("input");
    if (curr_ligand) $('#ligbtn, #prsv').show();
    
    if (cen_ligand) curr_ligand.autoView();
}

function showNode(n)
{
    var i;
    var nmax = 0;
    for (i=0; i<model.length; i++)
    {
        if (mpos[i] == gpose && mnod[i] == n)
        {
            model[i].addRepresentation( mrep[i], mrparams[i] );
            if (is_ligand[i]) curr_ligand = model[i];
        }
        else
            model[i].removeAllRepresentations();

        if (mpos[i] == gpose && mnod[i] > nmax) nmax = mnod[i];
    }

    if (n < 0)
    {
        showNode(0);		// RECURSION!!!
        return;
    }

    if (n > nmax)
    {
        showNode(nmax);		// RECURSION!!!
        return;
    }

    $(".nodebtn").removeClass("hilite");
    $("#nodebtn"+n).addClass("hilite");

    gnode = parseInt(n);			// Givl upi Javascript from one sddjpar to another.

    $("#clip").trigger("input");
    if (curr_ligand) $('#ligbtn, #prsv').show();
    
    if (cen_ligand) curr_ligand.autoView();
}

$("body").on("keyup", function(e, obj)
{
    var cc = e.key.charCodeAt(0);
    if (e.altkey || e.ctrlkey) return;

    if (e.keyCode >= 37 && e.keyCode <= 40)
    {
        if (e.keyCode == 37) showNode(gnode-1);
        if (e.keyCode == 38) showPose(gpose-1);
        if (e.keyCode == 39) showNode(gnode+1);
        if (e.keyCode == 40) showPose(gpose+1);
        e.preventDefault();
        return;
    }
    else
    {
        if (cc > 0x60 && cc <= 0x7a) showPose(cc-0x60);
        else if (cc >= 0x30 && cc <= 0x39) showNode(cc-0x30);
        else if (cc > 0x40 && cc <= 0x59) showNode(cc-55);
        e.preventDefault();
    }
});

$("#clip").on("input", function (e, obj)
{
    var i;
    var clipValue = parseFloat($("#clip")[0].value);
    for (i=0; i<model.length; i++)
    {
        model[i].eachRepresentation( function(obj)
        {
            lcv = clipValue;
            if (is_ligand[i] && $("#preserve")[0].checked) lcv = 0;
            obj.setParameters( { "clipNear": lcv, } );
        });
    }
    for (i=0; i<gmodel.length; i++)
    {
        gmodel[i].eachRepresentation( function(obj)
        {
            obj.setParameters( { "clipNear": clipValue } );
        });
    }
    for (i=0; i<resmdl.length; i++)
    {
    	resmdl[i].eachRepresentation( function(obj)
        {
            obj.setParameters( { "clipNear": clipValue } );
        });
	}
    stage.setParameters( { "fogNear": (clipValue), "fogFar": Math.max(25+clipValue, 200-clipValue*3), } );
});

function getFileContents(event)
{
    var ff = event.target.files;

    var f = ff[0];
    var r = new FileReader();
    r.fname = f.name;
    $('#ligbtn, #prsv').hide();

    r.onload = (function(lf)
    {
        return function(e)
        {
            return loadFile(e.target.result, e.target.fname);
        };
    })(f);
    r.readAsText(f);
}

function loadFile(fileData, fileName = "")
{
	$("#pleasewait").show();
	window.setTimeout( function()
	{
		$("#pleasewait").hide();
	}, 5381);
	
	$("#affichage").hide();
	
    model = []
    gmodel = [];
    curr_ligand = false;
	resmdl = [];
	mdlresno = [];
	restoggled = [];
	sequence = "";
	
	mdlresno.push(0);
	
    var fext = fileName.substr(fileName.lastIndexOf('.')+1);
    orid = false; // 'OR1A1';
    try
    {
        orid = fileName.match(/(OR[0-9]{1,2}[A-Z]{1,2}|TAAR|VN1R)[0-9]{1,2}/)[0];
    }
    catch (e)
    {
        ;
    }

    $.ajax(
    {
		url: "http://www.primaryodors.org/recepinfo.php",
		data:
        {
			recep: orid,
        },
		fext: fext,
		fileData: fileData,
		success: function(poresult)
        {
            poresult = poresult.split("\n");

            var i;
            for (i=0; i<poresult.length; i++)
            {
                var ln = poresult[i];
                if (ln.substr(0, 6) == "METAL|")
                {
                    var fields = ln.split("|");
                    var j;
                    for (j=1; j<fields.length; j++)
                    {
                        var m = fields[j].match(/[0-9]{3}[:]/);
                        if (m && m.length)
                            mtlcoord.push(parseInt(m[0]));
                    }
                }
                if (ln.substr(0, 7) == "REGION|")
                {
                    var fields = ln.split("|");
                    if (fields[1].substr(0, 3) == "TMR")
                    {
                        var tmr = parseInt(fields[1].substr(3));
                        tmstart[tmr] = parseInt(fields[2]);
                        tmend[tmr] = parseInt(fields[3]);
                    }
                }
                if (ln.substr(0, 7) == "POCKET|")
                {
                	if (!pocket[0] && !pocket[1] && !pocket[2])		// Only care about the first one for now.
                	{
                		var fields = ln.split("|");
                		var i;
                		for (i=1; i<fields.length; i++)
                		{
                			var kv = fields[i].split('=');
                			if (kv.length > 1)
                			{
		            			if (kv[0] == 'center_x') pocket[0] = parseFloat(kv[1]);
		            			if (kv[0] == 'center_y') pocket[1] = parseFloat(kv[1]);
		            			if (kv[0] == 'center_z') pocket[2] = parseFloat(kv[1]);
		            			
		            			$('#pktbtn').show();
	            			}
                		}
                	}
                }
            }

            var fext = this.fext;
            switch (fext)
            {
		        case 'sdf':
		        case 'pdb':
                stage.removeAllComponents();
                window.result = fileData;
                cen_ligand = false;
                
                sequence = "";
                if (fext == 'pdb')
                {
                	var i;
                	var lines = fileData.split("\n");
                    var lres = 0;
                    var tmpstr = "";
                    for (i=0; i<lines.length; i++)
                    {
                        var ln = lines[i];
                        var resno = parseInt(ln.substr(22,4));
                        
                        if (lres != resno)
                        {
                        	if (ln.length > 20)
                        	{
                        		var aa1let = aa_1let_from_3let(ln.substr(17,3).trim());
                        		if (aa1let != '?')
                        		{
				                	var stringBlob6 = new Blob( [tmpstr], { type: 'text/plain'} );
				                	stage.loadFile( stringBlob6, { ext: 'pdb' } ).then( function( comp6 )
				            		{
				            			resmdl.push(comp6);
				            			restoggled.push(0);
				            		});
				            		
				                	lres = resno;
			            			mdlresno.push(resno);
				                	tmpstr = "";
				                	while (sequence.length < resno-1) sequence += "-";
		                    		sequence += aa1let;
                        		}
                    		}
                        }
                        if (ln.length < 20) continue;
                        
                        tmpstr += ln + "\n";
                    }
                    if (tmpstr)
                    {
	                	var stringBlob6a = new Blob( [tmpstr], { type: 'text/plain'} );
	                	stage.loadFile( stringBlob6a, { ext: 'pdb' } ).then( function( comp6a )
	            		{
	            			resmdl.push(comp6a);
	            			restoggled.push(0);
	            		});
	            		mdlresno.push(resno);
    				}
                    
                }
                
                if (fext == 'sdf')
                {
                	$('#posey')[0].innerText = fileData.split("\n")[0];
            	}
                
                var stringBlob = new Blob( [ fileData ], { type: 'text/plain'} );
                stage.loadFile( stringBlob, { ext: fext } ).then( function( comp )
                {
                    if (fext == 'sdf')
                    {
                        comp.addRepresentation( "ball+stick",
                        {
                        	opacity: opc_molecule,
							multipleBond: true,
                        	metalness: mtl_bs,
                        } );
                        gmodel.push(comp);

                    	comp.autoView();
                    }

                    if (fext == 'pdb')
                    {
                        comp.addRepresentation( "cartoon",
                        {
                            opacity: opc_cartoon,
							colorScheme: PODefRgnScheme,
                            // colorScale: 'rainbow',
                            metalness: mtl_cartoon,
                        });
                        gmodel.push(comp);

                        var i;
                        var subset = [], shiny = [];
                        var result = window.result.split("\n");
                        for (i=0; i<result.length; i++)
                        {
                            var ln = result[i];
                            var resno = parseInt(ln.substr(22,4));
                            var aname = ln.substr(12,4).trim();
                            if (mtlcoord.indexOf(resno) >= 0
                                    && aname != "N"
                                    && aname != "HN"
                                    && aname != "H"
                                    && aname != "CA"
                                    && aname != "HA"
                                    && aname != "HA1"
                                    && aname != "HA2"
                                    // Due to a bug in NGL, the C and O atoms are required if including CA in
                                    // licorice, ball+stick, or line mode. Hyperball avoids this but is slower to render.
                                    // && aname != "C"
                                    // && aname != "O"
                               ) subset.push(ln);
                            if (ln.substr(17,3) == "MTL") shiny.push(ln);
                        }
                        var stringBlob1 = new Blob( [ subset.join("\n") ], { type: 'text/plain'} );
                        stage.loadFile( stringBlob1, { ext: 'pdb' } ).then( function( comp1 )
                        {
                            comp1.addRepresentation( "licorice",
                            {
                                opacity: opc_sidechain_active,
								colorScheme: PODefScheme,
                                metalness: mtl_licorice,
                            });
                            gmodel.push(comp1);
                        });
                        var stringBlob2 = new Blob( [ shiny.join("\n") ], { type: 'text/plain'} );
                        stage.loadFile( stringBlob2, { ext: 'pdb' } ).then( function( comp2 )
                        {
                            comp2.addRepresentation( "spacefill",
                            {
                                opacity: opc_metal,
								colorScheme: PODefScheme,
                                metalness: mtl_metal,
                            });
                            gmodel.push(comp2);
                        });

                    	comp.autoView();
                        
                        const quaternion = new THREE.Quaternion();
						quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );
						stage.animationControls.rotate(quaternion);
                    }
                } );
                $("#affichage").show();
                break;

            	case 'txt':
            	case 'dock':
                stage.removeAllComponents();
                var lines = fileData.split("\n");
                cen_ligand = true;
                
                var i;
                var mod = "m";
                for (i=0; i<10; i++)
                {
                	if (lines[i].substr(0, 10) == "PDB file: ")
                	{
                		if (lines[i].indexOf(".metal.") < 0) mod = "";
                		break;
            		}
                }

				if (orid)
				{
		            $.ajax(
		            {
						url: "http://www.primaryodors.org/orpdb.php",
						data:
		                {
							"recep": orid,
							"mod": mod,
		                },
						success: function(poresult)
		                {
		                    var i;
		                    var shiny = [];
		                    var result = poresult.split("\n");
		                    var lres = 0;
		                    var tmpstr = "";
		                    for (i=0; i<result.length; i++)
		                    {
		                        var ln = result[i];
		                        var resno = parseInt(ln.substr(22,4));
		                        var aname = ln.substr(12,4).trim();
		                        if (ln.substr(17,3) == "MTL") shiny.push(ln);
		                        
		                        if (lres != resno)
				                {
				                	if (ln.length > 20)
				                	{
				                		var aa1let = aa_1let_from_3let(ln.substr(17,3).trim());
				                		if (aa1let != '?')
				                		{
								        	var stringBlob5 = new Blob( [tmpstr], { type: 'text/plain'} );
						                	stage.loadFile( stringBlob5, { ext: 'pdb' } ).then( function( comp5 )
						            		{
						            			resmdl.push(comp5);
						        				restoggled.push(0);
						            		});
						            		mdlresno.push(resno);
								    		
								        	lres = resno;
								        	tmpstr = "";
								        	
						            		sequence += aa1let;
						            		
						            		$('#clip').trigger("input");
				                		}
				            		}
				                }
				                if (ln.length < 20) continue;
		                        
		                        tmpstr += ln + "\n";
		                        
		                        $('#clip').trigger("input");
		                    }
				            if (tmpstr)
				            {
					        	var stringBlob5a = new Blob( [tmpstr], { type: 'text/plain'} );
					        	stage.loadFile( stringBlob5a, { ext: 'pdb' } ).then( function( comp5a )
					    		{
					    			resmdl.push(comp5a);
					    			restoggled.push(0);
					    			$('#clip').trigger("input");
					    		});
					    		mdlresno.push(resno);
							}

		                    var stringBlob3 = new Blob( [ poresult ], { type: 'text/plain'} );
		                    stage.loadFile( stringBlob3, { ext: 'pdb' } ).then( function( comp3 )
		                    {
		                        comp3.addRepresentation( "cartoon",
		                        {
		                            opacity: opc_cartoon,
									colorScheme: PODefRgnScheme,
		                            metalness: mtl_cartoon,
		                        });
		                        gmodel.push(comp3);
		                        $('#clip').trigger("input");
			                });

		                    if (shiny.length)
		                    {
		                        var stringBlob4 = new Blob( [ shiny.join("\n") ], { type: 'text/plain'} );
		                        stage.loadFile( stringBlob4, { ext: 'pdb' } ).then( function( comp4 )
		                        {
		                            comp4.addRepresentation( "spacefill",
		                            {
		                                opacity: opc_metal,
										colorScheme: PODefScheme,
		                                metalness: mtl_metal,
		                            });
		                            gmodel.push(comp4);
		                            $('#clip').trigger("input");
		                        });
		                    }
		                }
		            });
	            }

                var posey = $('#posey')[0];
                var i, writing=false, p=0, n=0;
                var protmp = "", ligtmp = "";
                posey.innerHTML = "Pose: ";
                model = [];
                is_ligand = [];
                mpos = [];
                mnod = [];
                for (i=0; i<lines.length; i++)
                {
                    var ln = lines[i];

                    if (ln.substr(0,6) == "Pose: ")
                    {
                        p = parseInt(ln.substr(6));
                        ligtmp += "REMARK 225 " + ln + "\n";
                    }
                    else if (ln.substr(0,6) == "Node: ")
                    {
                        n = parseInt(ln.substr(6));
                        ligtmp += "REMARK 225 " + ln + "\n";
                    }
                    else if (ln.trim() == "PDBDAT:")
                    {
                        if (p>0) writing = true;
                    }
                    else if (ln.trim() == "END")
                    {
                        if (!n)
                        {
                        	var btnid = "posebtn"+p;
                        	
                        	if (!$('#'+btnid).length)
                        	{
		                        var posea = document.createElement("a");
		                        posea.className = "posebtn";
		                        if (p==1) $(posea).addClass("hilite");
		                        posea.innerText = p;
		                        posea.id = btnid;
		                        posea.setAttribute("onclick", "showPose("+p+");");

		                        posey.appendChild(posea);
                            }
                        }

                        if (writing)
                        {
                            var stringBlob7a = new Blob( [ protmp ], { type: 'text/plain'} );
                            stage.loadFile( stringBlob7a, { ext: 'pdb', name: p+"|"+n } ).then( function( comp7a )
                            {
                                var rparam =
                                {
                                    opacity: opc_sidechain_active,
									colorScheme: PODefSchemeHilite,
                                    metalness: mtl_licorice,
                                };

                                model.push(comp7a);
                                mrep.push("licorice");
                                mrparams.push(rparam);
                                is_ligand.push(0);

                                var lpn = comp7a.name.split("|");
                                mpos.push(parseInt(lpn[0]));
                                mnod.push(parseInt(lpn[1]));
                                $('#clip').trigger("input");
                            } );

                            var stringBlob7b = new Blob( [ ligtmp ], { type: 'text/plain'} );
                            stage.loadFile( stringBlob7b, { ext: 'pdb', name: p+"|"+n } ).then( function( comp7b )
                            {
                                var rparam =
                                {
									opacity: opc_ligand,
									multipleBond: true,
									colorScheme: PODefSchemeLigand,
                                    metalness: mtl_bs,
                                };

                                model.push(comp7b);
                                mrep.push("ball+stick");
                                mrparams.push(rparam);
                                is_ligand.push(1);

                                var lpn = comp7b.name.split("|");
                                mpos.push(parseInt(lpn[0]));
                                mnod.push(parseInt(lpn[1]));
                                $('#clip').trigger("input");
                            } );
                        }
                        writing = false;
                        protmp = ligtmp = "";
                    }
                    else if (writing)
                    {
                        if (ln.substr(17,3) == "LIG")
                            ligtmp += ln + "\n";
                        else
                            protmp += ln + "\n";
                    }
                }
                window.setTimeout(function()
                {
                    showPose(1);
                    // curr_ligand.autoView();
                }, 259);
                $("#affichage").show();
                break;

            	default:
                alert('Unknown file type ' + fext);
            }
            window.setTimeout(function()
            {
            	$("#pleasewait").hide();
            	$('#clip').trigger("input");
                curr_ligand.autoView();
        	}, 503);
        }
    });
}

$('input[type=file]').on('input', getFileContents);
</script>

<div id="citefloat">
	<span>
	</span>
	<br>
	<a href="https://nglviewer.org/ngl/api/">Visualization using NGL Viewer</a>
</div>

<script>
$('#citefloat span')[0].innerText = nglcitation;
</script>

<div id="pleasewait" style="display: none;">
<h2>Please Wait...</h2>
<img src="http://www.primaryodors.org/imgs/Proton_Zundel.gif">
</div>

<div id="seqdd" style="display: none;">
</div>
	
