# Code Outline for PrimaryDock

# Classes

The core class hierarchy consists of the Atom, Bond, InteratomicForce, Molecule, AminoAcid, and Protein classes.

The Atom class contains all the details about atoms including atomic number, charge, atomic weight, location in 3D space, etc.
Isotopes are not currently included. The parameters of the atom such as polarity and van der Waals radius are involved in
code outside the Atom class that computes binding energies and clashes between molecules. Atomic data are stored in the
`data/elements.dat` file.

The Bond class is defined alongside the Atom class. It has two Atom* pointers, creatively named `atom` and `btom`, as well
as a bond cardinality. The Bond class keeps track of whether each bond can flex, as well as which atoms move in unison when
a given bond does flex. Bond rotations are accomplished by calling the `Bond::rotate()` function.

There is also a Ring class defined alongside Atom and Bond. Ring functionality is important for computing aromatic
interactions, but this class currently isn't used for much else. Ultimately, the hope is to have code for ring flexions,
including chair and boat forms of carvones and menthols, as well as full flexibility of macrocyclic musks.

The InteratomicForce class contains the code for computing interactions and clashes between atoms. Interatomic force data
are stored in `data/bindings.dat` and loaded into this class at runtime. The static `InteratomicForce::get_applicable()`
function returns all non-covalent forces possible between any two atoms, taking into account each atom's properties within
its parent molecule. The static `InteratomicForce::total_binding()` function returns a number representing the total binding
energy between two atoms. Note positive means attractive binding energy while negative means repulsive forces and clashes.

